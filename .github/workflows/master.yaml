name: CICD

on:
  pull_request:
    branches: [master]
  push:
    branches: [master]
  workflow_dispatch:
    inputs:
      # Working directory input from user.
      resource:
        type: choice
        description: Choose the resource
        options:
          - name_of_dir1
          - name_of_dir2
      # Terraform action you want to perform
      action:
        description: "Terraform Action to Perform"
        type: choice
        options:
          - Terraform_apply
          - Terraform_destroy
env:
  REGION: eu-west-1
  ENVIRONMENT: dev
  DEV_CLUSTER_KUBECONF: ${{ secrets.KUBE_CONFIG_DATA_DEV }}
jobs:
  # paths-filter:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     output1: ${{ steps.filter.outputs.aws }}
  #     output2: ${{ steps.filter.outputs.miner }}
  #     output3: ${{ steps.filter.outputs.client }}
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: dorny/paths-filter@v2
  #       id: filter
  #       with:
  #         filters: |
  #           aws:
  #             - './aws/env/dev'
  #           miner:
  #             - './miner-service/**'
  #           client:
  #             - './ws-client/**'
  configure:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{env.REGION}}

  terraform:
    runs-on: ubuntu-latest
    needs: configure
    # if: needs.paths-filter.outputs.output1 == 'true'
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v2
      - name: AWS infrastructure
        run: |
          echo HELLO, MY FOLDER $(pwd), ls $(ls)
          cd ./aws/env/${{env.ENVIRONMENT}}
          terraform init -backend-config=../config/${{env.ENVIRONMENT}}.conf -force-copy 
          terraform plan -out plan -var-file=../config/${{env.ENVIRONMENT}}.tfvars -var "region=$REGION" -var "azs=[\"$REGIONa\",\"$REGIONb\"]" -var "aws_access_key=${{ secrets.AWS_ACCESS_KEY }}" -var "aws_secret_key=${{ secrets.AWS_SECRET_KEY }}"
          terraform apply -auto-approve plan
          terraform output -json > terraform_output.json
          ws_url=$(jq -r .ws_url.value terraform_output.json)
          cluster_name=$(jq -r .eks_cluster_name.value terraform_output.json)
          ecr_miner_url=$(jq -r .ecr_miner_url.value terraform_output.json)
          ecr_front_url=$(jq -r .ecr_front_url.value terraform_output.json)
          data_dynamodb_table=$(jq -r .data_dynamodb_table.value terraform_output.json)
          echo table:$data_dynamodb_table, ecr_f:$ecr_front_url, ecr_m:$ecr_miner_url, ws:$ws_url
  build:
    runs-on: ubuntu-latest
    needs: [terraform]
    steps:
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"
      - name: Build miner
        # if: needs.paths-filter.outputs.output2 == 'true'
        run: |
          cd /miner-service
          docker build -t miner-service .
          docker tag miner-service:latest $ecr_miner_url/miner-service:latest
          docker push $ecr_miner_url:latest

      - name: Build client
        # if: needs.paths-filter.outputs.output3 == 'true'
        run: |
          cd /ws-client
          docker build -t client-service .
          docker tag client-service:latest $ecr_front_url/client-service:latest
          docker push $ecr_front_url:latest
  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Install kubectl
        uses: azure/setup-kubectl@v2.0
        with:
          version: "v1.28.2"
        id: install
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region ${{env.REGION}} --name $cluster_name
      - name: Deploy
        run: |
          cd ./k8s
          kubectl create namespace front --dry-run=client -o name 2>/dev/null || kubectl create namespace front
          echo "$DEV_CLUSTER_KUBECONF" >> ./base/secrets.yml
          kubectl apply -f ./base
          kubectl apply -f ./front
          kubectl apply -f ./miner
  terraform_destroy:
    name: "Terraform_destroy"
    if: ${{ github.event.inputs.action == 'Terraform_destroy' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.event.inputs.resource }}
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{env.REGION}}
      - name: Terraform Init
        id: init
        run: terraform init -backend-config=../config/${{env.ENVIRONMENT}}.conf -force-copy

      - name: Terraform Destroy
        id: destroy
        working-directory: ${{ github.event.inputs.resource }}
        run: terraform destroy  -var-file=../config/dev.tfvars -var "aws_access_key=${{ secrets.AWS_ACCESS_KEY }}" -var "aws_secret_key=${{ secrets.AWS_SECRET_KEY }}"  --auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_DEFAULT_REGION: ${{ env.REGION }}
