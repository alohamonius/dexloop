name: CICD

on:
  pull_request:
    branches: [master]
  push:
    branches: [master]

jobs:
  paths-filter:
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.filter.outputs.aws }}
      output2: ${{ steps.filter.outputs.miner }}
      output3: ${{ steps.filter.outputs.client }}
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            aws:
              - './aws/env/**'
            miner:
              - './miner-service/**'
            client:
              - './ws-client/**'
  configure:
    runs-on: ubuntu-latest
    env:
      REGION: eu-west-2
    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{env.REGION}}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"
      - name: Install kubectl
        uses: azure/setup-kubectl@v2.0
        with:
          version: "v1.28.2"
        id: install
  terraform:
    runs-on: ubuntu-latest
    needs: configure
    # if: needs.paths-filter.outputs.output1 == 'true'
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v2
      - name: AWS infrastructure
        run: |
          cd ./aws/env/dev
          terraform init -backend-config=./config/backend.conf -force-copy
          terraform plan -out plan -var-file=config/dev.tfvars -var "aws_access_key=${{ secrets.AWS_ACCESS_KEY }}" -var "aws_secret_key=${{ secrets.AWS_SECRET_KEY }}"
          terraform apply -auto-approve plan
          terraform output -json > terraform_output.json
          ws_url=$(jq -r .ws_url.value terraform_output.json)
          cluster_name=$(jq -r .eks_cluster_name.value terraform_output.json)
          ecr_miner_url=$(jq -r .ecr_miner_url.value terraform_output.json)
          ecr_front_url=$(jq -r .ecr_front_url.value terraform_output.json)
          data_dynamodb_table=$(jq -r .data_dynamodb_table.value terraform_output.json)
  build:
    runs-on: ubuntu-latest
    needs: [terraform]
    steps:
      - name: Build miner
        # if: needs.paths-filter.outputs.output2 == 'true'
        run: |
          cd /miner-service
          docker build -t miner-service .
          docker tag miner-service:latest $ecr_miner_url/miner-service:latest
          docker push $ecr_miner_url:latest

      - name: Build client
        # if: needs.paths-filter.outputs.output3 == 'true'
        run: |
          cd /ws-client
          docker build -t client-service .
          docker tag client-service:latest $ecr_front_url/client-service:latest
          docker push $ecr_front_url:latest
  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region ${{env.REGION}} --name $cluster_name
      - name: Deploy
        run: |
          cd ./k8s
          kubectl apply -f ./base
          kubectl apply -f ./front
          kubectl apply -f ./miner

      # - name: deploy to cluster
      #   uses: kodermax/kubectl-aws-eks@master
      #   env:
      #     KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA_STAGING }}
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: my-app
      #     IMAGE_TAG: ${{ github.sha }}
      #   with:
      #     args: set image deployment/$ECR_REPOSITORY $ECR_REPOSITORY=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # You can add more steps to deploy to EKS using kubectl here
